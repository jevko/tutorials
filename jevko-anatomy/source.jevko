# {Anatomy of a jevko}

p {This is an informal description of the various elements of the Jevko syntax.}

p {{The name } em {Jevko} { /ˈdʒef.kɔ/ is derived from Polish } em{drzewko} { /ˈdʐɛf.kɔ/, meaning } em{small tree}{.}}

p {This relates to the fact that Jevko is meant to be a minimal syntax for simple flexible tree structures.}

p {{We shall call a specific instance of a Jevko tree a } jevko{.{inline}jevko}{.}}

p {An example of a jevko looks like this:}

pre {
jevko {first name [string]
last name [string]
is alive [boolean]
age [integer]
address [
  street address [string]
  city [string]
  state [string]
  postal code [string]
]
children [list]
spouse []
object}
}

p {We will now break this example down and identify and name its parts.}

## {top jevko}

p {{Notice that the jevko is not wrapped in square brackets. A jevko which is not wrapped in square brackets is the }em{top}{ or }em{top-level}{ jevko.}}

## {jevko parts: subjevkos and suffix}

p {{A jevko is made out of a number of } sub{.{inline}{subjevkos}} { followed by a } suf{.{inline}{suffix}}{:}}

pre {
sub {first name [string]}
sub {last name [string]}
sub {is alive [boolean]}
sub {age [number]}
sub {address [
  street address [string]
  city [string]
  state [string]
  postal code [string]
]}
sub {children [array]}
sub {spouse []}
suf {object}
}

## {subjevko parts: prefix and jevko}

p {{A }sub{.{inline}subjevko}{ is a kind of a name-value pair:}}

pre {
  sub {first name [string]}
}

p {
  {A subjevko is made out of a } prefix{.{inline}{prefix}} { followed by a } jevko{.{inline}{jevko}} { wrapped in [square brackets]:}
}

pre {
prefix {first name }{[}jevko {.{inline}string}{]}
}

## {nested jevkos}

p {{A jevko which is wrapped in square brackets is called }em{nested}{.}}

## {trivial jevkos and subjevkos}

p {Notice that the jevko nested in the above subjevko has no subjevkos of its own, only a suffix:}

pre {
suf {string}
}

p {{A jevko without subjevkos like this is called } em{trivial}{.}}

p {A subjevko whose jevko is trivial is itself called trivial.}

## {empty jevkos}

p {Now let's look at this subjevko:}

pre {
  prefix{spouse }{[}jevko {.{inline}}{]}
}

p {The jevko in this subjevko can't be seen -- it has no subjevkos and an empty suffix.}

p {{Such a jevko is called }em{empty}{.}}

p {An empty jevko is a special case of a trivial jevko.}

## {complex jevkos and subjevkos}

p {Another interesting subjevko is this one:}

pre {
prefix {address }{[}
jevko {  street address [string]
  city [string]
  state [string]
  postal code [string]
}{]}
}

p {Its nested jevko has 4 subjevkos:}

pre {
sub {  street address [string]}
sub {  city [string]}
sub {  state [string]}
sub {  postal code [string]}
}

p {{A jevko with at least one subjevko is called }em{complex}{.}}

p {A subjevko whose jevko is complex is itself called complex.}

# {Whitespace}

p {Whitespace is characters such as spaces, new lines, and tabs.}

## {text}

p {All whitespace in a jevko is part of a text.}

p {A text is a prefix or a suffix.}

## {blank text}

p {{Text which is made only of whitespace is called }em{blank}{. Blank text may be empty.}}

## {blank jevkos}

p {A trivial jevko with a blank suffix is itself called blank. For example:}

pre {
suf {    }
}

## {blank subjevkos}

p {A subjevko with a blank prefix and a blank jevko is called blank. For example:}

pre {
sub {  [  ]}
}

## {empty subjevkos}

p {A subjevko with an empty prefix and an empty jevko is called empty. It looks like this:}

pre {
sub {[]}
}

## {new lines}

p {Notice that in a jevko like this:}

pre {
sub {first name [string]}
sub {last name [string]}
suf {object}
}

p {The new line after the first subjevko is actually part of the second subjevko's prefix (shown below as ¶ for clarity):}

pre {
sub {.{inline}first name [string]}
prefix {¶
last name }{[}jevko{.{inline}string}{]}
}

p {Similarly, the new line after the second subjevko is part of the jevko's suffix:}

pre {
sub {.{inline}last name [string]}
suf {.{inline}¶
object}
}

p {Similarly in this subjevko's jevko:}

pre {
prefix {address }{[}
jevko {  street address [string]
  city [string]
  state [string]
  postal code [string]
}{]}
}

p {the new line after the opening bracket [ is part of the prefix of the first subjevko:}

pre {
gray {address }{[}
prefix {.{inline}¶
  street address }{[}jevko{.{inline}string}{]}
sub {  city [string]}
sub {  state [string]}
sub {  postal code [string]}
{]}
}

p {Also the new line before the closing bracket ] is the suffix of the jevko:}

pre {
gray {address }{[}
sub {  street address [string]}
sub {  city [string]}
sub {  state [string]}
sub {.{inline}  postal code [string]}
suf {.{inline}¶
}
{]}
}

p {Similar thing is true for all prefixes and suffixes. All whitespace is captured by them.}

p {In fact this this is how all the prefixes and suffixes in our example jevko look like exactly:}

pre {
prefix {first name }{[}suffix {string}{]}
prefix {¶
last name }{[}suffix {string}{]}
prefix {¶
is alive }{[}suffix {boolean}{]}
prefix {¶
age }{[}suffix {integer}{]}
prefix {¶
address }{[}
prefix {¶
  street address }{[}suffix {string}{]}
prefix {¶
  city }{[}suffix {string}{]}
prefix {¶
  state }{[}suffix {string}{]}
prefix {¶
  postal code }{[}suffix {string}{]}
suffix {¶
}
{]}
prefix {¶
children }{[}suffix {list}{]}
prefix {¶
spouse }{[}{]}
suffix {¶
object}
}

p {{Notice that square brackets are }em{not}{ captured either by prefixes or by suffixes: they separate them.}}